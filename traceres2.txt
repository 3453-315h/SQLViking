==SECOND FIND_RES CALL==
 --- modulename: tds, funcname: find_result_or_done
tds.py(3825):         self.done_flags = 0
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3838):                 self.process_token(marker)
 --- modulename: tds, funcname: process_token
tds.py(3764):         handler = _token_map.get(marker)
tds.py(3765):         if not handler:
tds.py(3767):         return handler(self)
 --- modulename: tds, funcname: <lambda>
tds.py(3877):     TDS_ROW_TOKEN: lambda self: self.process_row(),
 --- modulename: tds, funcname: process_row
tds.py(2877):         r = self._reader
tds.py(2878):         info = self.res_info
tds.py(2879):         info.row_count += 1
tds.py(2881):         res=[]
tds.py(2882):         f = open('out.txt','a')
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1205):         return r.get_int()
 --- modulename: tds, funcname: get_int
tds.py(769):         return self.unpack(_int_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1286):         size = r.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1287):         if size == 0:
tds.py(1289):         if size not in self._valid_sizes:
tds.py(1291):         return r.unpack(self._struct[size])[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2884):             curcol.value = self.row[i] = curcol.type.read(r)
 --- modulename: tds, funcname: read
tds.py(1416):         size = r.get_smallint()
 --- modulename: tds, funcname: get_smallint
tds.py(761):         return self.unpack(_smallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(1417):         if size < 0:
tds.py(1419):         return r.read_str(size, self._codec)
 --- modulename: tds, funcname: read_str
tds.py(799):         return codec.decode(readall(self, size))[0]
 --- modulename: tds, funcname: readall
tds.py(682):     return b''.join(read_chunks(stm, size))
 --- modulename: tds, funcname: read_chunks
tds.py(651):     if size == 0:
tds.py(655):     res = stm.read(size)
 --- modulename: tds, funcname: read
tds.py(830):         buf, offset = self.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(831):         return buf[offset:offset + size]
tds.py(656):     if len(res) == 0:
tds.py(658):     yield res
 --- modulename: tds, funcname: read_chunks
tds.py(659):     left = size - len(res)
tds.py(660):     while left:
 --- modulename: cp1252, funcname: decode
cp1252.py(15):         return codecs.charmap_decode(input,errors,decoding_table)
tds.py(2885):             f.write('%s\t'%str(curcol.value))
tds.py(2886):             res.append(str(curcol.value))
tds.py(2883):         for i, curcol in enumerate(info.columns):
tds.py(2887):         f.write('\n\n')
tds.py(2888):         f.close()
tds.py(2889):         self.results.append(res)
tds.py(3826):         while True:
tds.py(3827):             marker = self.get_token_id()
 --- modulename: tds, funcname: get_token_id
tds.py(3770):         self.set_state(TDS_READING)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3090):             return state
tds.py(3771):         try:
tds.py(3772):             marker = self._reader.get_byte()
 --- modulename: tds, funcname: get_byte
tds.py(757):         return self.unpack(_byte)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(3779):         return marker
tds.py(3828):             if marker == TDS7_RESULT_TOKEN:
tds.py(3831):             elif marker in (TDS_DONE_TOKEN, TDS_DONEPROC_TOKEN, TDS_DONEINPROC_TOKEN):
tds.py(3832):                 self.process_end(marker)
 --- modulename: tds, funcname: process_end
tds.py(2939):         self.more_rows = False
tds.py(2940):         r = self._reader
tds.py(2941):         status = r.get_usmallint()
 --- modulename: tds, funcname: get_usmallint
tds.py(765):         return self.unpack(_usmallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2942):         r.get_usmallint()  # cur_cmd
 --- modulename: tds, funcname: get_usmallint
tds.py(765):         return self.unpack(_usmallint_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2943):         more_results = status & TDS_DONE_MORE_RESULTS != 0
tds.py(2944):         was_cancelled = status & TDS_DONE_CANCELLED != 0
tds.py(2946):         done_count_valid = status & TDS_DONE_COUNT != 0
tds.py(2952):         if self.res_info:
tds.py(2953):             self.res_info.more_results = more_results
tds.py(2954):         rows_affected = r.get_int8() if IS_TDS72_PLUS(self) else r.get_int()
 --- modulename: tds, funcname: <lambda>
tds.py(38): IS_TDS72_PLUS = lambda x: x.tds_version >= TDS72
 --- modulename: tds, funcname: tds_version
tds.py(3071):         return self._tds.tds_version
 --- modulename: tds, funcname: get_int8
tds.py(785):         return self.unpack(_int8_le)[0]
 --- modulename: tds, funcname: unpack
tds.py(752):         buf, offset = readall_fast(self, struct.size)
 --- modulename: tds, funcname: readall_fast
tds.py(686):     buf, offset = stm.read_fast(size)
 --- modulename: tds, funcname: read_fast
tds.py(735):         if self._pos >= len(self._buf):
tds.py(742):         offset = self._pos
tds.py(743):         self._pos += size
tds.py(744):         return self._buf, offset
tds.py(687):     if len(buf) - offset < size:
tds.py(692):     return buf, offset
tds.py(753):         return struct.unpack_from(buf, offset)
tds.py(2956):         if was_cancelled or (not more_results and not self.in_cancel):
tds.py(2958):             self.in_cancel = False
tds.py(2959):             self.set_state(TDS_IDLE)
 --- modulename: tds, funcname: set_state
tds.py(3088):         prior_state = self.state
tds.py(3089):         if state == prior_state:
tds.py(3091):         if state == TDS_PENDING:
tds.py(3097):         elif state == TDS_READING:
tds.py(3104):         elif state == TDS_IDLE:
tds.py(3105):             if prior_state == TDS_DEAD:
tds.py(3108):             self.state = state
tds.py(3124):         return self.state
tds.py(2960):         if done_count_valid:
tds.py(2961):             self.rows_affected = rows_affected
tds.py(2964):         self.done_flags = status
tds.py(2965):         if self.done_flags & TDS_DONE_ERROR and not was_cancelled and not self.in_cancel and 1==0:
tds.py(3833):                 if self.done_flags & TDS_DONE_MORE_RESULTS and not self.done_flags & TDS_DONE_COUNT:
tds.py(3836):                 return False
['adrian@coinageandthingsco.com', '282', 'cmFpbmJvdw==', '2', 'NY']
['alejandra@angresellers.net', '237', 'aHVudGVy', '3', 'animal']
['alex@portoimportsco.net', '169', 'Y29tcHV0ZXI=', '2', 'Colorado']
['allen@collectablesforlessinc.net', '379', 'dmlwZXI=', '4', 'password']
['altagar@raananstores.net', '481', 'MTExMTEx', '2', 'California']
['annette@alphacognac.net', '242', 'Z2luZ2Vy', '3', 'cat']
['anton@antondesigns.net', '465', 'amFzcGVy', '4', 'asdf']
['arnold@cruzsonsco.net', '385', 'Zm9vYmFy', '3', 'animal']
['ashworth@avstores.net', '187', 'YWFhYWFh', '4', '123456']
['bertrand@lacornedabondance.com', '172', 'c2hhZG93', '3', 'cat']
['bill@australiancollectors.net', '114', 'bG92ZQ==', '4', 'coins']
['bob@ateliergraphique.com', '103', 'MTIzNDU2', '1', 'blue']
['bradley@schuylerimports.com', '303', 'Zmxvd2Vy', '4', 'openup']
['braun@preciouscollectables.com', '376', 'MXcyZTNl', '2', 'Colorado']
['brown@stylishdeskdecors.net', '324', 'cGFzc3cwcmQ=', '1', 'sky blue']
['calaghan@australiangoldnetwork.net', '333', 'ZnJpZW5kcw==', '4', '123456']
['cassidy@clovercollections.net', '189', 'c3VwZXJtYW4=', '3', 'cat']
['catherine@petitmetals.net', '314', 'Z29vZ2xl', '1', 'blue']
['cervantes@classicgoldideas.net', '339', 'c21va2V5', '3', 'dog']
['chandler@menrusretailers.com', '347', 'ZGlnaXRhbA==', '3', 'animal']
['clenahan@australiancollectables.net', '471', 'ZGFuaWVsbGU=', '3', 'dog']
['cramer@cramerspezialitten.com', '335', 'aGFybGV5', '4', 'coins']
['dan@goldideascorp.net', '447', 'Y29jYWNvbGE=', '1', 'blue']
['daniel@lyoncoinage.net', '250', 'YXBwbGU=', '1', 'green']
['daniel@metalsassociscie.com', '256', 'aWxvdmV5b3Uz', '3', 'dog']
['devon@ukcollectables.com', '201', 'Zm9vdGJhbGw=', '3', 'dog']
['donnermeyer@bavariancollectablesimports.net', '415', 'b25lbG92ZQ==', '3', 'animal']
['dopreciousque@metalscanalpetit.com', '406', 'ZGFsbGFz', '1', 'blue']
['dorothy@onlinepremiumcreationsco.net', '363', 'cG93ZXI=', '2', 'Texas']
['ed@bgecollectables.net', '293', 'Y29tcGFx', '1', 'blue']
['eduardo@enacodistributors.com', '216', 'c29jY2FyMQ==', '1', 'light blue']
['feuer@feueronlinestores.net', '443', 'YnViYmxlcw==', '1', 'sky blue']
['franco@fraudacollezione.com', '473', 'YW5nZWwx', '1', 'blue']
['franken@frankengold.net', '273', 'cm9ib3Q=', '3', 'dog']
['frdrique@preciouscaravy.net', '209', 'cGFzc3dvcmQx', '4', 'gold']
['gao@kingkongcollectables.net', '211', 'aWxvdmV5b3Ux', '1', 'sky blue']
['georg@salzburgcollectables.com', '382', 'Y3JlYXRpdmU=', '2', 'Florida']
['giovanni@rovelligold.com', '278', 'Z3VpdGFy', '4', 'coins']
['graham@downundercoinage.net', '323', 'YXVzdGlu', '2', 'Florida']
['hanna@mitvergngenco.com', '477', 'c2FtbXk=', '3', 'cat']
['helen@goldbymailcouk.net', '240', 'c25vb3B5', '2', 'Missouri']
['holz@vidasport.net', '298', 'Z29sZA==', '1', 'green']
['horst@natrlichmetals.com', '223', 'YmFzZWJhbGwx', '2', 'Ohio']
['james@landofcoinsinc.net', '131', 'aG9wZQ==', '2', 'NY']
['jane@volvomodelreplicas.net', '144', 'bW90aGVy', '2', 'Texas']
['jean@qubechomeshoppingnetwork.com', '233', 'b3Jhbmdl', '2', 'California']
['jeff@musclecoinsinc.net', '151', 'bGV0bWVpbg==', '4', 'asdf']
['jerry@cambridgecollectablesco.com', '173', 'aW50ZXJuZXQ=', '4', '123456']
['jerry@goatgoldstore.net', '112', 'cGFzc3dvcmQ=', '3', 'dog']
['jesus@cafimports.net', '344', 'bHVja3k=', '3', 'dog']
['jill@baanepreciousimports.net', '121', 'cHJpbmNlc3M=', '3', 'cat']
['julie@coins4grownupscom.com', '205', 'bWljaGFlbA==', '2', 'Texas']
['julie@corporategoldideasco.com', '321', 'YWRtaW4=', '4', 'qwerty']
['julie@golddepotinc.com', '175', 'd2hhdGV2ZXI=', '4', '123456']
['julie@preciousmetalsco.com', '129', 'c3VtbWVy', '2', 'Texas']
['juri@gold4allagescom.net', '362', 'aG9ja2V5', '4', 'asdf']
['kalle@suominencoinage.com', '334', 'bmludGVuZG8=', '2', 'New York']
['karin@kommissionmetals.net', '361', 'Y29ydmV0dGU=', '1', 'blue']
['karttunen@coinsoffinland.net', '186', 'bWF0cml4', '2', 'TX']
['kate@blauerseemetals.net', '128', 'aWxvdmV5b3U=', '2', 'Florida']
['keith@americanbankinc.com', '168', 'bW9ua2V5', '1', 'sky blue']
['kelvin@premiumclassicsinc.com', '157', 'dHJ1c3RubzE=', '4', '123456']
['klaeboe@norwaygoldbymail.net', '299', 'Y29vbA==', '2', 'New York']
['koskitalo@oulutoysupplies.net', '311', 'bWVybGlu', '2', 'Colorado']
['kuger@sardistributors.net', '356', 'ZW50ZXI=', '3', 'dog']
['laurence@marseillepreciousmetals.net', '350', 'c3Bpcml0', '3', 'dog']
['leslie@metalscoinclassicsinc.com', '198', 'cG9rZW1vbg==', '3', 'cat']
['leslie@supersilverinc.com', '455', 'YmFieQ==', '2', 'New York']
['lincoln@royalcanadiancollectables.net', '260', 'c2lsdmVy', '4', 'coins']
['maria@classiclegendsinc.com', '424', 'bWljcm9zb2Z0', '1', 'sky blue']
['mark@larochellegold.net', '119', 'MTIzNDU2Nzg=', '2', 'Ohio']
['marta@martasreplicasco.com', '286', 'ZGFrb3Rh', '1', 'red']
['martha@scandinaviangoldideas.com', '448', 'bG92aW5n', '3', 'animal']
['martine@daedalusdesignsimports.com', '171', 'YXNkZg==', '4', '123456']
['mary@boardscoinsco.com', '219', 'aWxvdmV5b3Uh', '2', 'NY']
['matt@euroshoppingchannel.net', '141', 'bG9va2luZw==', '1', 'light blue']
['maurizio@lordinecoinage.net', '386', 'c2xheWVy', '4', 'gold']
['mckenna@asiantreasures.net', '348', 'dGh1bmRlcg==', '2', 'New York']
['mcroy@extremedeskdecorations.com', '412', 'dGVzdHRlc3Q=', '3', 'dog']
['mel@derhundimports.net', '307', 'c2Nvb3Rlcg==', '4', '123456']
['michael@vitachromeinc.net', '181', 'cGFzcw==', '2', 'FL']
['miguel@onlinepreciouscollectables.net', '204', 'aGVscG1l', '2', 'Florida']
['mory@osakacoinageco.net', '177', 'Y2hlZXNl', '2', 'Texas']
['ohara@annasdecorations.com', '276', 'cGVhbnV0', '3', 'dog']
['palle@heintzecollectables.com', '227', 'cXdlcnR5MQ==', '4', 'password']
['paolo@amicacoinsco.com', '249', 'dGVzdGluZw==', '4', 'coins']
['pasilver@royalebelge.com', '381', 'cXdlcnR5MQ==', '1', 'blue']
['paul@reimscollectables.com', '353', 'YmFuZGl0', '1', 'blue']
['pfalzheim@tomsspezialitten.net', '259', 'Y2FuYWRh', '3', 'dog']
['renate@messnershoppingnetwork.com', '247', 'bXVzdGFuZw==', '2', 'California']
['rita@stuttgartcollectableexchange.com', '409', 'Z3JlZW4=', '1', 'red']
['rob@saveleyhenriot.net', '146', 'aGFwcHk=', '2', 'Florida']
['rodriguez@lisboacoinage.net', '369', 'YmVuamFtaW4=', '3', 'dog']
['roel@iberiagoldimports.com', '484', 'bGlnaHRuaW5n', '1', 'blue']
['roland@preciousmetalswerke.com', '452', 'bWF4d2VsbA==', '3', 'cat']
['rosa@coinrmintdistributorsinc.com', '486', 'cmVtZW1iZXI=', '3', 'cat']
['sally@danishwholesaleimports.com', '145', 'Zm9vdGJhbGw=', '2', 'NY']
['sam@technicsstoresinc.com', '161', 'YWJjMTIz', '2', 'New York']
['semenov@kremlincollectables.com', '480', 'bm9uZQ==', '3', 'animal']
['shimamura@tokyocollectables.com', '398', 'd2lzZG9t', '3', 'cat']
['sky@havelzbyszekco.com', '125', 'c2luZ2xl', '2', 'California']
['smith@doubledeckergoldstores.com', '489', 'bGV0bWVpbjE=', '3', 'dog']
['sommer@corridametalsreplicas.net', '458', 'ZGV4dGVy', '3', 'dog']
['steve@dragoncoinage.com', '148', 'cXdlcnR5', '3', 'cat']
['steve@preciousclassics.net', '319', 'c3RhcnRyZWs=', '2', 'Colorado']
['steve@westcoastcollectablesco.net', '475', 'NTU1NTU1', '4', 'letmein']
['sue@signalcollectiblesltd.net', '487', 'b3BlbnVw', '2', 'California']
['sue@thesharpgoldwarehouse.net', '450', 'cGFzc3dvcmQh', '3', 'cat']
['susan@preciousgolddistributorsltd.com', '124', 'c3Vuc2hpbmU=', '2', 'California']
['sven@warburgexchange.com', '459', 'a2l0dGVu', '1', 'light blue']
['tony@kellysgoldshop.net', '496', 'c3RhcndhcnM=', '1', 'sky blue']
['valarie@collectablepreciousdesignsco.com', '239', 'amVubmlmZXI=', '4', 'coins']
['valarie@premiumcollectables.com', '495', 'bHVja3kx', '1', 'blue']
['vey@herkkugold.net', '167', 'ZHJhZ29u', '1', 'blue']
['violeta@fungoldideascom.com', '462', 'c3RlbGxh', '3', 'dog']
['wales@goldforhimcom.net', '357', 'YW50aG9ueQ==', '4', 'openup']
['walker@asianshoppingnetwork.com', '206', 'c2VjcmV0', '3', 'dog']
['wendy@handjigoldco.com', '166', 'aGVsbG8=', '1', 'sky blue']
['william@teknicollectablesinc.net', '328', 'd2lubmVy', '1', 'red']
['wing@preciouscreationsltd.net', '320', 'bWF0cml4IQ==', '4', 'password']
['yoshi@canadiangoldexchangenetwork.com', '202', 'YmxhaGJsYWg=', '4', 'letmein']
['yu@microsilverinc.com', '456', 'cHJpbmNl', '2', 'New York']
